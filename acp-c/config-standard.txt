#
zookeeper=lr-k8s-arcus-zk-0.lr-k8s-arcus-zk-headless.uhm0311.svccluster.local:2181,lr-k8s-arcus-zk-1.lr-k8s-arcus-zk-headless.uhm0311.svccluster.local:2181,lr-k8s-arcus-zk-2.lr-k8s-arcus-zk-headless.uhm0311.svccluster.local:2181

#
service_code=lrc-k8s-with-k8s-zk

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=5

#
rate=1000

#
request=0

#
time=0

keyset_size=200000
key_prefix=c-jam2in-s003:
valueset_min_size=10
valueset_max_size=50

client_profile=standard_mix

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=100

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false
